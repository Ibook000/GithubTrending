name: 🚀 自动生成GitHub趋势榜单

on:
  schedule:
    - cron: '0 2 * * *'  # 每天UTC时间2点（北京时间10点）
  workflow_dispatch:  # 支持手动触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写权限来提交历史文件
      pages: write
      id-token: write

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 网络连接诊断
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          echo "🔍 开始网络连接诊断..."
          python test_network.py
        continue-on-error: true

      - name: 🎯 生成趋势榜单页面
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          # 设置GitHub Actions标识
          GITHUB_ACTIONS: true
          # 配置网络相关环境变量
          PYTHONUNBUFFERED: 1
          REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
        run: |
          echo "🌐 配置网络环境..."
          # 显示网络配置信息
          echo "DNS配置:"
          cat /etc/resolv.conf
          echo "测试网络连接:"
          curl -I https://openrouter.ai --connect-timeout 10 || echo "⚠️ OpenRouter连接测试失败"
          
          echo "🚀 开始生成趋势榜单..."
          python github_trending_cards.py
          
          # 确保生成了HTML文件
          if [ ! -f "github_trending_cards.html" ]; then
            echo "❌ HTML文件生成失败"
            exit 1
          fi
          echo "✅ HTML文件生成成功"
          
          # 显示生成的文件信息
          echo "📄 生成的文件:"
          ls -la github_trending_cards.*

      - name: 📅 检出gh-pages分支
        run: |
          # 创建临时工作目录
          mkdir -p temp_gh_pages
          cd temp_gh_pages
          
          # 初始化Git仓库
          git init
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 拉取gh-pages分支
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch origin gh-pages || echo "⚠️ gh-pages分支不存在，将创建新分支"
          git checkout -b gh-pages origin/gh-pages 2>/dev/null || git checkout -b gh-pages
          
          echo "✅ gh-pages分支已检出"

      - name: 📊 生成历史统计页面
        run: |
          # 在原始目录生成统计页面
          python generate_history_stats.py
          
          # 验证统计页面生成
          if [ -f "history/index.html" ]; then
            echo "✅ 历史统计页面已生成"
          else
            echo "❌ 历史统计页面生成失败"
            exit 1
          fi

      - name: 📅 保存历史页面到gh-pages
        run: |
          # 获取当前日期
          DATE=$(date +%Y-%m-%d)
          echo "📅 保存历史页面到gh-pages: $DATE"
          
          # 复制文件到gh-pages目录
          cd temp_gh_pages
          
          # 创建历史目录结构
          mkdir -p "history/$DATE"
          
          # 复制当前生成的文件
          cp ../github_trending_cards.html "history/$DATE/index.html"
          cp ../github_trending_cards.css "history/$DATE/github_trending_cards.css"
          
          # 复制展示图片
          if [ -f "../img.png" ]; then
            cp "../img.png" "history/$DATE/"
          fi
          
          # 复制历史统计页面
          if [ -f "../history/index.html" ]; then
            cp "../history/index.html" "history/index.html"
          fi
          
          # 创建详细的元数据
          cat > "history/$DATE/metadata.json" << EOF
          {
            "date": "$DATE",
            "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "timestamp": $(date +%s),
            "source": "GitHub Trending",
            "workflow_run": "${{ github.run_number }}",
            "git_commit": "${{ github.sha }}",
            "repository": "${{ github.repository }}"
          }
          EOF
          
          # 验证历史目录完整性
          echo "🔍 验证gh-pages历史目录:"
          ls -la "history/$DATE/"
          
          # 统计历史天数
          TOTAL_DAYS=$(find history -maxdepth 1 -type d -name "20*" | wc -l)
          echo "📊 总历史天数: $TOTAL_DAYS"

      - name: 📄 准备gh-pages发布文件
        run: |
          cd temp_gh_pages
          
          echo "📁 准备gh-pages发布文件..."
          
          # 复制最新版本到根目录
          cp ../github_trending_cards.html index.html
          cp ../github_trending_cards.css styles.css
          
          # 复制展示图片
          if [ -f "../img.png" ]; then
            cp "../img.png" .
          fi
          
          # 创建README
          cat > README.md << EOF
          # GitHub趋势榜单 - GitHub Pages
          
          自动生成的GitHub趋势榜单，每日更新。
          
          ## 📅 今日信息
          - **生成时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **工作流编号**: ${{ github.run_number }}
          - **提交哈希**: ${{ github.sha }}
          
          ## 🔗 快速访问
          - [🏠 最新榜单](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
          - [📊 历史统计](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/history/)
          - [📁 项目仓库](https://github.com/${{ github.repository }})
          
          ## 📈 历史记录
          所有历史数据都保存在 \`history/\` 目录中，按日期分类存储。
          
          ## 📊 数据统计
          - **总记录天数**: $(find history -maxdepth 1 -type d -name "20*" | wc -l)
          - **最后更新**: $(date +%Y-%m-%d)
          
          ---
          *由GitHub Actions自动生成* 🤖
          EOF
          
          # 创建CNAME文件（如果需要自定义域名）
          # echo "your-domain.com" > CNAME
          
          # 创建.gitignore
          echo "*.log" > .gitignore
          echo ".DS_Store" >> .gitignore
          
          # 显示发布文件结构
          echo "📂 gh-pages文件结构:"
          find . -type f | head -20 | sed 's/^/  /'
          
          # 计算文件大小
          TOTAL_SIZE=$(du -sh . | cut -f1)
          echo "📊 gh-pages总大小: $TOTAL_SIZE"

      - name: 🚀 提交并推送gh-pages
        run: |
          cd temp_gh_pages
          
          echo "🚀 准备提交gh-pages..."
          
          # 添加所有文件
          git add .
          
          # 创建提交信息
          DATE=$(date +%Y-%m-%d)
          COMMIT_MSG="🎨 更新GitHub趋势榜单 - $DATE
          
          - 生成时间: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - 工作流编号: ${{ github.run_number }}
          - 提交哈希: ${{ github.sha }}
          - 历史天数: $(find history -maxdepth 1 -type d -name "20*" | wc -l)"
          
          # 检查是否有更改
          if ! git diff --staged --quiet; then
            echo "📝 检测到文件更改，正在提交..."
            git commit -m "$COMMIT_MSG"
            
            # 推送gh-pages分支
            echo "🚀 推送gh-pages分支..."
            git push -f origin gh-pages
            echo "✅ gh-pages分支已更新"
          else
            echo "✅ 无文件更改，跳过提交"
          fi

      - name: 🧹 清理临时文件
        run: |
          rm -rf temp_gh_pages
          echo "🧹 临时文件已清理"